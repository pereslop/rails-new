.post-comments id= "post-content-#{post.id}" data-post-id=post.id
  .post-content
    .user-avatar
      = link_to account_user_path(post.user), method: :get do
        - if post.user.avatar.url
          = image_tag post.user.avatar.url, class: 'img-responsive img-circle'
        - else
          = image_tag 'britni.png', class: 'img-responsive img-circle'
    .post-data#post-content
      = link_to "#{post.user.username}", account_user_path(post.user), method: :get, class: 'post-username'
      p.post-time= "#{time_ago_in_words(post.created_at)} ago"
      - if post.user == current_user || current_user.admin?
        - if local_assigns[:user_post]
          = render 'account/users/posts/user_post_edit_and_destroy_actions', post: post, user: currne
        - else
          = render 'account/posts/post_edit_and_destroy_actions', post: post
      p= post.content
  .post-content
    .like
      = render 'account/posts/like_btn', post: post
    .new-post
      = link_to new_account_post_comment_path(post), method: :get, remote: true do
        button.btn.btn-primary.btn-sm#new-comment-button New comment
  .underline
  #comments
coffee:
  RailsNew.postId = $('[id^=post-content-]').attr("data-post-id")
  class RailsNew.Collections.Comments extends Backbone.Collection
    model: RailsNew.Models.Comment
    url: ->
      "/account/posts/#{RailsNew.postId}/comments/page/1"
    'click': ->
      alert 'you cliked me'
  $ ->
    RailsNew.comments = new RailsNew.Collections.Comments
    RailsNew.commentsListView = new RailsNew.Views.CommmentsListView(collection: RailsNew.comments)
    RailsNew.comments.fetch()